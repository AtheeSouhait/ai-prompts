[
  {
    "name": "Metroid-Clone Phaser 3",
    "description": "A complete Phaser 3 project replicating classic Metroid mechanics and best practices.",
    "type": "project",
    "slug": "metroid-clone-phaser3",
    "author": {
      "name": "kevin regenrek",
      "url": "https://github.com/regenrek",
      "avatar": "https://avatars.githubusercontent.com/u/5182020?v=4"
    },
    "prompts": [],
    "filePath": "prompts/metroid-clone-phaser3/aiprompt.json"
  },
  {
    "name": "Next.js",
    "description": "A complete Next.js project with all the necessary files and folders.",
    "type": "starter",
    "slug": "nextjs",
    "author": {
      "name": "kevin regenrek",
      "url": "https://github.com/regenrek",
      "avatar": "https://avatars.githubusercontent.com/u/5182020?v=4"
    },
    "prompts": [],
    "filePath": "prompts/Next.js/aiprompt.json"
  },
  {
    "name": "Next.js Bootstrap Supabase",
    "description": "Next.js project with Supabase integration, Bootstrap CSS, and TypeScript.",
    "type": "project",
    "slug": "nextjs-bootstrap-supabase",
    "author": {
      "name": "kevin regenrek",
      "url": "https://github.com/regenrek",
      "avatar": "https://avatars.githubusercontent.com/u/5182020?v=4"
    },
    "prompts": [
      {
        "id": "prompts-next-js-bootstrap-supabase-rule1.md",
        "description": "Guidelines for installing and setting up Next.js 15 with ShadCN and Lucide React",
        "globs": "**/*.ts, **/*.tsx, **/*.js, **/*.jsx",
        "content": "\n# Next.js 15 + ShadCN + Lucide React Installation Guide\n\nYou are a frontend expert setting up a Next.js 15 project with ShadCN UI and Lucide React for a consistent, optimized, and maintainable component system.\n\n## 🚀 Installation Steps\n\n- Uses App Router (`app/` directory).\n- Comes with ESLint and TailwindCSS pre-configured.\n\nATTENTION: Nextjs is already installed and has a pre setup since if\nyou install nextjs with ai then it will create a new directory within the current\ndirectory and this leads to an error!\n\n2. Set up ShadCN UI\n```bash\nnpx shadcn@latest init\n```\n- Select TypeScript and TailwindCSS when prompted.\n- ShadCN will create the `components/ui/` folder for UI components.\n\n3. Install Lucide React (Icons)\n```bash\nnpm install lucide-react\n```\n- Use Lucide icons consistently in UI components.\n\n4. Add ShadCN Components\n```bash\nnpx shadcn@latest add button input dialog\n```\n- Only install necessary components to keep the bundle size small.\n- The CLI will add them to `components/ui/`.\n\n---\n\n## ⚙️ Configuration & Setup\n\n### 1. Global Theme & Styling\n\nShadCN relies on Tailwind, so configure your `tailwind.config.ts`:\n\n```ts\nimport type { Config } from \"tailwindcss\";\n\nconst config: Config = {\n  darkMode: \"class\",\n  content: [\n    \"./app/**/*.{js,ts,jsx,tsx}\",\n    \"./components/**/*.{js,ts,jsx,tsx}\",\n    \"./pages/**/*.{js,ts,jsx,tsx}\"\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n\nexport default config;\n```\n\n### 2. Using ShadCN Components with Lucide Icons\n\nExample: Button with an icon.\n\n```tsx\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight } from \"lucide-react\";\n\nexport default function ExampleButton() {\n  return (\n    <Button variant=\"outline\">\n      Click me\n      <ArrowRight className=\"ml-2 h-4 w-4\" />\n    </Button>\n  );\n}\n```\n\n### 3. Customizing Components\n\nYou can extend ShadCN components instead of modifying them directly.\n\nExample: Creating a custom button variant.\n\n```tsx\nimport { cn } from \"@/lib/utils\";\nimport { Button, ButtonProps } from \"@/components/ui/button\";\n\nexport function CustomButton({ className, ...props }: ButtonProps) {\n  return <Button className={cn(\"bg-primary text-white\", className)} {...props} />;\n}\n```\n\n---\n\n## ⚡ Performance & Best Practices\n\n### ✅ Do This\n✔ Use `npx shadcn add <component>` instead of manually copying components.  \n✔ Keep UI logic inside `components/ui/` and business logic separate.  \n✔ Lazy load large or infrequently used UI components with `dynamic()`.  \n\n### ❌ Avoid This\n✖ Importing all ShadCN components at once.  \n✖ Overriding ShadCN styles inside individual components (use Tailwind config instead).  \n✖ Using non-standard icons or mixing multiple icon libraries.  \n\n---\n\n## 🔥 Final Project Structure\n\n```\napp/\n│── layout.tsx\n│── page.tsx\n│── dashboard/\n│   ├── page.tsx\ncomponents/\n│── ui/\n│   ├── button.tsx\n│   ├── input.tsx\n│── CustomButton.tsx\nlib/\n│── utils.ts\nstyles/\n│── globals.css\n│── tailwind.config.ts\n```\n\n---\n\n## ✅ Final Notes\n\n- Always keep ShadCN and Lucide up to date with `npx shadcn@latest upgrade`.\n- Only install necessary UI components to reduce build size.\n- Ensure accessibility by keeping ARIA attributes in ShadCN components.\n\nThis guide ensures a clean, scalable, and high-performance Next.js 15 project with ShadCN UI & Lucide React.\n",
        "filePath": "prompts/next-js-bootstrap-supabase/rule1.md"
      },
      {
        "id": "prompts-next-js-bootstrap-supabase-rule2.md",
        "description": "Guidelines for installing and setting up Next.js 15 with ShadCN and Lucide React",
        "globs": "**/*.ts, **/*.tsx, **/*.js, **/*.jsx",
        "content": "\n# Next.js 15 + ShadCN + Lucide React Installation Guide\n\nYou are a frontend expert setting up a Next.js 15 project with ShadCN UI and Lucide React for a consistent, optimized, and maintainable component system.\n\n## 🚀 Installation Steps\n\n- Uses App Router (`app/` directory).\n- Comes with ESLint and TailwindCSS pre-configured.\n\nATTENTION: Nextjs is already installed and has a pre setup since if\nyou install nextjs with ai then it will create a new directory within the current\ndirectory and this leads to an error!\n\n2. Set up ShadCN UI\n```bash\nnpx shadcn@latest init\n```\n- Select TypeScript and TailwindCSS when prompted.\n- ShadCN will create the `components/ui/` folder for UI components.\n\n3. Install Lucide React (Icons)\n```bash\nnpm install lucide-react\n```\n- Use Lucide icons consistently in UI components.\n\n4. Add ShadCN Components\n```bash\nnpx shadcn@latest add button input dialog\n```\n- Only install necessary components to keep the bundle size small.\n- The CLI will add them to `components/ui/`.\n\n---\n\n## ⚙️ Configuration & Setup\n\n### 1. Global Theme & Styling\n\nShadCN relies on Tailwind, so configure your `tailwind.config.ts`:\n\n```ts\nimport type { Config } from \"tailwindcss\";\n\nconst config: Config = {\n  darkMode: \"class\",\n  content: [\n    \"./app/**/*.{js,ts,jsx,tsx}\",\n    \"./components/**/*.{js,ts,jsx,tsx}\",\n    \"./pages/**/*.{js,ts,jsx,tsx}\"\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n\nexport default config;\n```\n\n### 2. Using ShadCN Components with Lucide Icons\n\nExample: Button with an icon.\n\n```tsx\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight } from \"lucide-react\";\n\nexport default function ExampleButton() {\n  return (\n    <Button variant=\"outline\">\n      Click me\n      <ArrowRight className=\"ml-2 h-4 w-4\" />\n    </Button>\n  );\n}\n```\n\n### 3. Customizing Components\n\nYou can extend ShadCN components instead of modifying them directly.\n\nExample: Creating a custom button variant.\n\n```tsx\nimport { cn } from \"@/lib/utils\";\nimport { Button, ButtonProps } from \"@/components/ui/button\";\n\nexport function CustomButton({ className, ...props }: ButtonProps) {\n  return <Button className={cn(\"bg-primary text-white\", className)} {...props} />;\n}\n```\n\n---\n\n## ⚡ Performance & Best Practices\n\n### ✅ Do This\n✔ Use `npx shadcn add <component>` instead of manually copying components.  \n✔ Keep UI logic inside `components/ui/` and business logic separate.  \n✔ Lazy load large or infrequently used UI components with `dynamic()`.  \n\n### ❌ Avoid This\n✖ Importing all ShadCN components at once.  \n✖ Overriding ShadCN styles inside individual components (use Tailwind config instead).  \n✖ Using non-standard icons or mixing multiple icon libraries.  \n\n---\n\n## 🔥 Final Project Structure\n\n```\napp/\n│── layout.tsx\n│── page.tsx\n│── dashboard/\n│   ├── page.tsx\ncomponents/\n│── ui/\n│   ├── button.tsx\n│   ├── input.tsx\n│── CustomButton.tsx\nlib/\n│── utils.ts\nstyles/\n│── globals.css\n│── tailwind.config.ts\n```\n\n---\n\n## ✅ Final Notes\n\n- Always keep ShadCN and Lucide up to date with `npx shadcn@latest upgrade`.\n- Only install necessary UI components to reduce build size.\n- Ensure accessibility by keeping ARIA attributes in ShadCN components.\n\nThis guide ensures a clean, scalable, and high-performance Next.js 15 project with ShadCN UI & Lucide React.\n",
        "filePath": "prompts/next-js-bootstrap-supabase/rule2.md"
      }
    ],
    "filePath": "prompts/next-js-bootstrap-supabase/aiprompt.json"
  },
  {
    "name": "Next.js Shadcn Lucide",
    "description": "Installs shadcn and lucide icon library within a Next.js project",
    "type": "starter",
    "slug": "nextjs-shadcn-lucide",
    "author": {
      "name": "Kevin Kern",
      "url": "https://github.com/regenrek",
      "avatar": "https://avatars.githubusercontent.com/u/5182020?v=4"
    },
    "prompts": [
      {
        "id": "prompts-next-js-shadcn-lucide-next-js-shadcn-lucide.md",
        "description": "Guidelines for installing and setting up Next.js 15 with ShadCN and Lucide React",
        "globs": "**/*.ts, **/*.tsx, **/*.js, **/*.jsx",
        "content": "\n# Next.js 15 + ShadCN + Lucide React Installation Guide\n\nYou are a frontend expert setting up a Next.js 15 project with ShadCN UI and Lucide React for a consistent, optimized, and maintainable component system.\n\n## 🚀 Installation Steps\n\n- Uses App Router (`app/` directory).\n- Comes with ESLint and TailwindCSS pre-configured.\n\nATTENTION: Nextjs is already installed and has a pre setup since if\nyou install nextjs with ai then it will create a new directory within the current\ndirectory and this leads to an error!\n\n2. Set up ShadCN UI\n```bash\nnpx shadcn@latest init\n```\n- Select TypeScript and TailwindCSS when prompted.\n- ShadCN will create the `components/ui/` folder for UI components.\n\n3. Install Lucide React (Icons)\n```bash\nnpm install lucide-react\n```\n- Use Lucide icons consistently in UI components.\n\n4. Add ShadCN Components\n```bash\nnpx shadcn@latest add button input dialog\n```\n- Only install necessary components to keep the bundle size small.\n- The CLI will add them to `components/ui/`.\n\n---\n\n## ⚙️ Configuration & Setup\n\n### 1. Global Theme & Styling\n\nShadCN relies on Tailwind, so configure your `tailwind.config.ts`:\n\n```ts\nimport type { Config } from \"tailwindcss\";\n\nconst config: Config = {\n  darkMode: \"class\",\n  content: [\n    \"./app/**/*.{js,ts,jsx,tsx}\",\n    \"./components/**/*.{js,ts,jsx,tsx}\",\n    \"./pages/**/*.{js,ts,jsx,tsx}\"\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n\nexport default config;\n```\n\n### 2. Using ShadCN Components with Lucide Icons\n\nExample: Button with an icon.\n\n```tsx\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight } from \"lucide-react\";\n\nexport default function ExampleButton() {\n  return (\n    <Button variant=\"outline\">\n      Click me\n      <ArrowRight className=\"ml-2 h-4 w-4\" />\n    </Button>\n  );\n}\n```\n\n### 3. Customizing Components\n\nYou can extend ShadCN components instead of modifying them directly.\n\nExample: Creating a custom button variant.\n\n```tsx\nimport { cn } from \"@/lib/utils\";\nimport { Button, ButtonProps } from \"@/components/ui/button\";\n\nexport function CustomButton({ className, ...props }: ButtonProps) {\n  return <Button className={cn(\"bg-primary text-white\", className)} {...props} />;\n}\n```\n\n---\n\n## ⚡ Performance & Best Practices\n\n### ✅ Do This\n✔ Use `npx shadcn add <component>` instead of manually copying components.  \n✔ Keep UI logic inside `components/ui/` and business logic separate.  \n✔ Lazy load large or infrequently used UI components with `dynamic()`.  \n\n### ❌ Avoid This\n✖ Importing all ShadCN components at once.  \n✖ Overriding ShadCN styles inside individual components (use Tailwind config instead).  \n✖ Using non-standard icons or mixing multiple icon libraries.  \n\n---\n\n## 🔥 Final Project Structure\n\n```\napp/\n│── layout.tsx\n│── page.tsx\n│── dashboard/\n│   ├── page.tsx\ncomponents/\n│── ui/\n│   ├── button.tsx\n│   ├── input.tsx\n│── CustomButton.tsx\nlib/\n│── utils.ts\nstyles/\n│── globals.css\n│── tailwind.config.ts\n```\n\n---\n\n## ✅ Final Notes\n\n- Always keep ShadCN and Lucide up to date with `npx shadcn@latest upgrade`.\n- Only install necessary UI components to reduce build size.\n- Ensure accessibility by keeping ARIA attributes in ShadCN components.\n\nThis guide ensures a clean, scalable, and high-performance Next.js 15 project with ShadCN UI & Lucide React.\n",
        "filePath": "prompts/next-js-shadcn-lucide/next-js-shadcn-lucide.md"
      }
    ],
    "filePath": "prompts/next-js-shadcn-lucide/aiprompt.json"
  }
]